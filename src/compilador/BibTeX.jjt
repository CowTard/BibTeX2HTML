PARSER_BEGIN(BibTeX)

package compilador;
import java.io.File;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import elementos.*;

public class BibTeX {
  public static void main(String args []) throws ParseException, IOException {
    String fname = "";
    Scanner sc = new Scanner(System.in);
    while (fileExist(fname) != true) {
	    System.out.print("Introduza o ficheiro que pretende usar > ");
	    fname = sc.nextLine();
	}

	BibTeX parser = new BibTeX(new FileInputStream(new File(fname)));
	parser.start();
	sc.close();
  }

  private static boolean fileExist(String filename) {
	File file = new File(filename);
	return file.exists();
  }
}

PARSER_END(BibTeX)

SKIP :
{
	" " | "\r" | "\t" | "\n"
}

TOKEN : // 1st level (entries)
{
	< ARTICLE : "@article" > |
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |
	< MASTERSTHESIS : "@mastersthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" >
}

TOKEN : // 2nd level [fields]
{
	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< JOURNAL : "journal" > |
	< YEAR : "year" > |
	< VOLUME : "volume" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |
	< SERIES : "series" > |
	< ADDRESS : "address" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< BOOKTITLE : "booktitle" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< INSTITUTION : "institution" >
}

TOKEN :
{
	< FIELD : "\"" (< WORD > | " ")+ "\"" > |
	< WORD : (< CHARACTER > | < INTEGER >)+ > |
	< CHARACTER : ["A"-"Z", "a"-"z"] > |
	< INTEGER : ["0"-"9"] >
}

void start() : {Token t1;}
{
  (
	t1 = < ARTICLE > {
		article();
	} |
	t1 = < BOOK > {
		book();
	} |
	t1 = < BOOKLET > {
		booklet();
	} |
	t1 = < CONFERENCE > {
		conference();
	} |
	t1 = < INBOOK > {
		inbook();
	} |
	t1 = < INCOLLECTION > {
		incollection();
	} |
	t1 = < INPROCEEDINGS > {
		inproceedings();
	} |
	t1 = < MANUAL > {
		manual();
	} |
	t1 = < MASTERSTHESIS > {
		mastersthesis();
	} |
	t1 = < MISC > {
		misc();
	} |
	t1 = < PHDTHESIS > {
		phdthesis();
	} |
	t1 = < PROCEEDINGS > {
		proceedings();
	} |
	t1 = < TECHREPORT > {
		techreport();
	} |
	t1 = < UNPUBLISHED > {
		unpublished();
	}
)+ < EOF >
}

Token definition() : {Token field;}
{
  "=" field = < FIELD >
  {
    System.out.println(field.image);
    return field;
  }
}

void article() : {Token reference = null, author = null, title = null, journal = null, year = null, volume = null, number = null, pages = null, month = null, note = null, key = null;}
{
	"{" (reference = < WORD >)? ","
    (< AUTHOR > author = definition() ",")?
    (< TITLE > title = definition() ",")?
    (< JOURNAL > journal = definition() ",")?
    (< YEAR > year = definition() ",")?
    (< VOLUME > volume = definition() ",")?
    (< NUMBER > number = definition() ",")?
    (< PAGES > pages = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
	  try {
		if (reference == null) throw new ParsingError("Falta uma chave de citação!");
		if (author != null && title != null && journal != null && year != null && volume != null)		{
		  Article artigo = new Article(reference.image, author.image, title.image, journal.image, year.image, volume.image);
		  if (number != null) artigo.setNumber(number.image);
		  if (pages != null) artigo.setPages(pages.image);
		  if (month != null) artigo.setMonth(month.image);
		  if (note != null) artigo.setNote(note.image);
		  if (key != null) artigo.setKey(key.image);		} else
		{
		  throw new ParsingError("A entrada \"@article\" tem os seguintes campos obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
  	}
}

void book() : {Token reference = null , author = null, editor = null, title = null, publisher = null, year = null, number = null, volume = null, series = null, address = null, edition = null, month = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
    (( (< AUTHOR > author = definition()) | (< EDITOR > editor = definition()) ) ",")?
    (< TITLE > title = definition() ",")?
    (< PUBLISHER > publisher = definition() ",")?
    (< YEAR > year = definition() ",")?
    ( (<VOLUME> volume = definition() | < NUMBER > number = definition()) ",")?
    (< SERIES > series = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< EDITION > edition = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
    {
      	if (reference != null) throw new ParsingError("[@book] : Falta uma chave de cita\u00e7\u00e3o!");
		if ( (author != null || editor != null) && title != null && publisher != null && year != null)
		{
		  Book livro;
		  if (author != null) livro = new Book(reference.image,"author", author.image, title.image, publisher.image, year.image);		  else  livro = new Book(reference.image,"editor", editor.image, title.image, publisher.image, year.image);
		  
		  if (volume != null) livro.setVolume(volume.image);
		  if (number != null) livro.setNumber(number.image);
		  if (series != null) livro.setSeries(series.image);
		  if (address != null) livro.setAddress(address.image);
		  if (edition != null) livro.setEdition(edition.image);
		  if (month != null) livro.setMonth(month.image);
		  if (note != null) livro.setNote(note.image);
		  if (key != null) livro.setKey(key.image);
		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
  	}
}

void booklet() :{Token reference = null, title = null, author = null, howpublished = null, address = null, month = null, year = null, note = null, key = null;}
{
  	"{" (reference = <WORD>)? ","
    (< TITLE > title = definition() ",")?
    (< AUTHOR > author = definition() ",")?
    (< HOWPUBLISHED > howpublished = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< YEAR > year = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
	  if ( reference != null && title != null)	  {
	    Booklet blt = new Booklet(reference.image, title.image);
	    if (author != null) blt.setAuthor(author.image);
	    if (howpublished != null) blt.setHowPublished(howpublished.image);
	    if (address != null) blt.setAddress(address.image);
	    if (month != null) blt.setMonth(month.image);
	    if (year != null) blt.setYear(year.image);
	    if (note != null) blt.setNote(note.image);
	    if (key != null) blt.setKey(key.image);		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
	}
}

void conference() : {Token reference = null, author = null, title = null, booktitle = null, year = null, editor = null, volume = null, number = null, series = null, pages = null, address = null, month = null, organization = null, publisher = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
	(< AUTHOR > author = definition() ",")?
	(< TITLE > title = definition() ",")?
	(< BOOKTITLE > booktitle = definition() ",")?
	(< YEAR > year = definition() ",")?
    (< EDITOR > editor = definition() ",")?
    ( ((<VOLUME> volume = definition()) | (< NUMBER > number = definition())) ",")?
    (< SERIES > series = definition() ",")?
    (< PAGES > pages = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< ORGANIZATION > organization = definition() ",")?
    (< PUBLISHER > publisher = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
		if (reference != null && author != null && title != null && booktitle != null && year != null)
		{
		  Conference conference = new Conference(reference.image, author.image, title.image, booktitle.image, year.image);
		  if (editor != null) conference.setEditor(editor.image);
		  if (volume != null) conference.setVolume(volume.image);
		  if (number != null) conference.setNumber(number.image);
		  if (series != null) conference.setSeries(series.image);
		  if (pages != null) conference.setPages(pages.image);
		  if (address != null) conference.setAddress(address.image);
		  if (month != null) conference.setMonth(month.image);
		  if (organization != null) conference.setOrganization(organization.image);
		  if (publisher != null) conference.setPublisher(publisher.image);
		  if (note != null) conference.setNote(note.image);
		  if (key != null) conference.setKey(key.image);
		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
	}
}

void inbook() : {Token reference = null, author = null, editor = null, title = null, chapter = null, pages = null, publisher = null, year = null, volume = null,
					number = null, series = null, type = null, address = null, edition = null, month = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
    (( (<AUTHOR> author = definition()) | (< EDITOR > editor = definition()) ) ",")?
    (< TITLE > title = definition() ",")?
    (( (<CHAPTER> chapter = definition()) | (< PAGES > pages = definition()) ) ",")?
    (< PUBLISHER > publisher = definition() ",")?
    (< YEAR > year = definition() ",")?
    ( ((<VOLUME> volume = definition()) | (< NUMBER > number = definition())) ",")?
    (< SERIES > series = definition() ",")?
    (< TYPE > type = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< EDITION > edition = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
    {
      if (reference != null && (author != null || editor != null) && title != null && (chapter != null || pages != null) && publisher != null && year != null)      {
        Inbook inbk;
		if (author != null)		{
		  if (chapter != null) inbk = new Inbook(reference.image, "author", author.image, title.image, "chapter", chapter.image, publisher.image, year.image);
		  else inbk = new Inbook(reference.image, "author", author.image, title.image, "pages", pages.image, publisher.image, year.image);		}
		else		{
		  if (chapter != null) inbk = new Inbook(reference.image, "editor", editor.image, title.image, "chapter", chapter.image, publisher.image, year.image);
		  else inbk = new Inbook(reference.image, "editor", editor.image, title.image, "pages", pages.image, publisher.image, year.image);		}

		if (volume != null) inbk.setVolume(volume.image);
		if (number != null) inbk.setNumber(number.image);
		if (series != null) inbk.setSeries(series.image);
		if (type != null) inbk.setType(type.image);
		if (address != null) inbk.setAddress(address.image);
		if (edition != null) inbk.setEdition(edition.image);
		if (month != null) inbk.setMonth(month.image);
		if (note != null) inbk.setNote(note.image);
		if (key != null) inbk.setKey(key.image);		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}    }
}

void incollection() : {Token reference = null, author = null, title = null, booktitle = null, publisher = null, year = null, editor = null, volume = null,
						number = null, series = null, type = null, chapter = null, pages = null, address = null, edition = null, month = null, note = null,
							key = null;}
{
	"{" (reference = <WORD>)? ","
    (<AUTHOR> author = definition()  ",")?
    (< TITLE > title = definition() ",")?
    (< BOOKTITLE > booktitle = definition() ",")?
    (< PUBLISHER > publisher = definition() ",")?
    (< YEAR > year = definition() ",")?
    (< EDITOR > editor =definition() ",")?
    ( ((<VOLUME> volume = definition()) | (< NUMBER > number = definition())) ",")?
    (< SERIES > series = definition() ",")?
    (< TYPE > type = definition() ",")?
    (< CHAPTER > chapter = definition() ",")?
    (< PAGES > pages = definition() ",")?
    (< ADDRESS > address= definition() ",")?
    (< EDITION > edition = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
    {		if (reference != null && author != null && title != null && booktitle != null && publisher != null && year != null)		{			Incollection inc = new Incollection(reference.image, author.image, title.image, booktitle.image, publisher.image, year.image);

			if (editor != null) inc.setEditor(editor.image);
			if (number != null) inc.setNumber(number.image);
			if (volume != null) inc.setVolume(volume.image);
			if (series != null) inc.setSeries(series.image);
			if (type != null) inc.setType(type.image);
			if (chapter != null) inc.setChapter(chapter.image);
			if (pages != null) inc.setPages(pages.image);
			if (address != null) inc.setAddress(address.image);
			if (edition != null) inc.setEdition(edition.image);
			if (month != null) inc.setMonth(month.image);
			if (note != null) inc.setNote(note.image);
			if (key != null) inc.setKey(key.image);
		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
    }
}

void inproceedings() : {Token reference = null, author = null, title = null, booktitle = null, year = null, editor = null, volume = null, number = null, series = null, pages = null, address = null, month = null, organization = null, publisher = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
	(< AUTHOR > author = definition() ",")?
	(< TITLE > title = definition() ",")?
	(< BOOKTITLE > booktitle = definition() ",")?
	(< YEAR > year = definition() ",")?
    (< EDITOR > editor = definition() ",")?
    ( ((<VOLUME> volume = definition()) | (< NUMBER > number = definition())) ",")?
    (< SERIES > series = definition() ",")?
    (< PAGES > pages = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< ORGANIZATION > organization = definition() ",")?
    (< PUBLISHER > publisher = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
		if (reference != null && author != null && title != null && booktitle != null && year != null)
		{
		  Inproceedings inproceedings = new Inproceedings(reference.image, author.image, title.image, booktitle.image, year.image);
		  if (editor != null) inproceedings.setEditor(editor.image);
		  if (volume != null) inproceedings.setVolume(volume.image);
		  if (number != null) inproceedings.setNumber(number.image);
		  if (series != null) inproceedings.setSeries(series.image);
		  if (pages != null) inproceedings.setPages(pages.image);
		  if (address != null) inproceedings.setAddress(address.image);
		  if (month != null) inproceedings.setMonth(month.image);
		  if (organization != null) inproceedings.setOrganization(organization.image);
		  if (publisher != null) inproceedings.setPublisher(publisher.image);
		  if (note != null) inproceedings.setNote(note.image);
		  if (key != null) inproceedings.setKey(key.image);
		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
	}
}

void manual() : {Token reference = null, title = null, author = null, organization = null, address = null, edition = null, month = null, year = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
	(< TITLE > title = definition() ",")?
    (< AUTHOR > author = definition() ",")?
    (< ORGANIZATION > organization = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< EDITION > edition = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< YEAR > year = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
		if (reference != null && title != null)
		{
		  Manual manual = new Manual(reference.image, title.image);
		  if (author != null) manual.setAuthor(author.image);
		  if (organization != null) manual.setOrganization(organization.image);
		  if (address != null) manual.setAddress(address.image);
		  if (edition != null) manual.setEdition(edition.image);
		  if (month != null) manual.setMonth(month.image);
		  if (year != null) manual.setYear(year.image);
		  if (note != null) manual.setNote(note.image);
		  if (key != null) manual.setKey(key.image);
		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
	}
}

void mastersthesis() : {Token reference = null, author = null, title = null, school = null, year = null, type = null, address = null, month = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
    (< AUTHOR > author = definition() ",")?
	(< TITLE > title = definition() ",")?
    (< SCHOOL > school = definition() ",")?
    (< YEAR > year = definition() ",")?
    (< TYPE > type = definition() ",")?
    (< ADDRESS > address = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
		if (reference != null && author != null && title != null && school != null && year != null)
		{
		  Mastersthesis mastersthesis = new Mastersthesis(reference.image, author.image, title.image, school.image, year.image);
		  if (type != null) mastersthesis.setType(type.image);
		  if (address != null) mastersthesis.setAddress(address.image);
		  if (month != null) mastersthesis.setMonth(month.image);
		  if (note != null) mastersthesis.setNote(note.image);
		  if (key != null) mastersthesis.setKey(key.image);
		} else
		{
		  System.out.println("SOME ERROR HAPPENED"); // EXCEÇÃO
		}
	}
}

void misc() : {Token reference = null, author = null, title = null, howpublished = null, month = null, year = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
    (< AUTHOR > author = definition() ",")?
    (< TITLE > title = definition() ",")?
    (< HOWPUBLISHED > howpublished = definition() ",")?
    (< MONTH > month = definition() ",")?
    (< YEAR > year = definition() ",")?
    (< NOTE > note = definition() ",")?
    (< KEY > key = definition() ",")?
    "}"
	{
	try {
		if (reference == null) throw new ParsingError("Falta uma chave de citação!");
		if (reference != null)
		{
		  Misc misc = new Misc(reference.image);
		  if (author != null) misc.setAuthor(author.image);
		  if (title != null) misc.setTitle(title.image);
		  if (howpublished != null) misc.setHowpublished(howpublished.image);
		  if (month != null) misc.setMonth(month.image);
		  if (year != null) misc.setYear(year.image);
		  if (note != null) misc.setNote(note.image);
		  if (key != null) misc.setKey(key.image);
		} else
		{
		  throw new ParsingError("A entrada \"@article\" tem os seguintes campos obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}

void phdthesis() : {Token reference = null, author = null, title = null, school = null, year = null, type = null, address = null, month = null, note = null;}
{
	"{" (reference = <WORD>)? ","
	(< AUTHOR > author = definition() ",")?
	(< TITLE > title = definition() ",")?
	(< SCHOOL > school = definition() ",")?
	(< YEAR > year = definition() ",")?
	(< TYPE > type = definition() "," )?
	(< ADDRESS > address = definition() "," )?
	(< MONTH > month = definition() "," )?
	(< NOTE > note = definition() "," )?
	"}"
	{
	try {
		if (reference == null) throw new ParsingError("Falta uma chave de citação!");
		if (author != null && title != null && school != null && year != null)
		{
		  Phdthesis phdthesis = new Phdthesis(reference.image, author.image, title.image, school.image, year.image);
		  if (type != null) phdthesis.setType(type.image);
		  if (address != null) phdthesis.setAddress(address.image);
		  if (month != null) phdthesis.setMonth(month.image);
		  if (note != null) phdthesis.setNote(note.image);
		} else
		{
		  throw new ParsingError("A entrada \"@article\" tem os seguintes campos obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}

void proceedings() : {Token reference = null, title = null, number = null, year = null, editor = null, volume = null, series = null, address = null, month = null, organization = null, publisher = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
	(< TITLE > title = definition() ",")?
	(< YEAR > year = definition() ",")?
	(< EDITOR > editor = definition() ",")?
	((< VOLUME > volume = definition() ",") | (< NUMBER > number = definition() ","))?
	(< SERIES > series = definition() ",")?
	(< ADDRESS > address = definition() ",")?
	(< MONTH > month = definition() ",")?
	(< ORGANIZATION > organization = definition() ",")?
	(< PUBLISHER > publisher = definition() ",")?
	(< NOTE > note = definition() ",")?
	(< KEY > key = definition() ",")?
	"}"
	{
	try {
		if (reference == null) throw new ParsingError("Falta uma chave de citação!");
		if (title != null && year != null)
		{
		  Proceedings proceedings;
		  proceedings = new Proceedings(reference.image, title.image, year.image);
		  if (editor != null) proceedings.setEditor(editor.image);
		  if (number != null) proceedings.setNumber(number.image);
		  if (volume != null) proceedings.setVolume(volume.image);
		  if (series != null) proceedings.setSeries(series.image);
		  if (organization != null) proceedings.setOrganization(organization.image);
		  if (publisher != null) proceedings.setPublisher(publisher.image);
		  if (address != null) proceedings.setAddress(address.image);
		  if (month != null) proceedings.setMonth(month.image);
		  if (note != null) proceedings.setNote(note.image);
		  if (key != null) proceedings.setKey(key.image);
		} else
		{
		  throw new ParsingError("A entrada \"@article\" tem os seguintes campos obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}

void techreport() : {Token reference = null, author = null, title = null, institution = null, year = null, type = null, number = null, address = null, month = null, note = null, key = null;}
{
	"{" (reference = <WORD>)? ","
	(< AUTHOR > author = definition() ",")?
	(< TITLE > title = definition() ",")?
	(< INSTITUTION > institution = definition() ",")?
	(< YEAR > year = definition() ",")?
	(< TYPE > type = definition() ",")?
	(< NUMBER > number = definition() ",")?
	(< ADDRESS > address = definition() ",")?
	(< MONTH > month = definition() ",")?
	(< NOTE > note = definition() ",")?
	(< KEY > key = definition() ",")?
	"}"
	{
	try {
		if (reference == null) throw new ParsingError("Falta uma chave de citação!");
		if (author != null && title != null && institution != null && year != null)
		{
		  Techreport techreport;
		  techreport = new Techreport(reference.image, author.image, title.image, institution.image, year.image);
		  if (type != null) techreport.setType(type.image);
		  if (number != null) techreport.setNumber(number.image);
		  if (address != null) techreport.setAddress(address.image);
		  if (month != null) techreport.setMonth(month.image);
		  if (note != null) techreport.setNote(note.image);
		  if (key != null) techreport.setKey(key.image);
		} else
		{
		  throw new ParsingError("A entrada \"@article\" tem os seguintes campos obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
  	}
}

void unpublished() : {Token reference = null, author = null, title = null, note = null, month = null, year = null, key = null;}
{
	"{" (reference = <WORD>)? ","
	(< AUTHOR > author = definition() ",")?
	(< TITLE > title = definition() ",")?
	(< NOTE > note = definition() ",")?
	(< MONTH > month = definition() ",")?
	(< YEAR > year = definition() ",")?
	(< KEY > key = definition() ",")?
	"}"
	{
	try {
		if (reference == null) throw new ParsingError("Falta uma chave de citação!");
		if ( author != null  && title != null && note != null)
		{
		  Unpublished unpublished;
		  unpublished = new Unpublished(reference.image, author.image, title.image, note.image);
		  if (month != null) unpublished.setMonth(month.image);
		  if (year != null) unpublished.setYear(year.image);
		  if (key != null) unpublished.setKey(key.image);
		} else
		{
		  throw new ParsingError("A entrada \"@article\" tem os seguintes campos obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}
