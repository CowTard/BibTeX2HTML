PARSER_BEGIN(BibTeX)

package compilador;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import elementos.*;

public class BibTeX {
	/* https://java.net/projects/javacc/lists/users/archive/2006-02/message/15
		We're using hashmap instead of hashtable because we are not dealing with concurrency on threads. 
	*/
  private static HashMap<String, HashMap<String, String> > symbolTable = new HashMap<String, HashMap<String, String>>();
  private static HashMap<String, ArrayList< Entry > > entradas = new HashMap<String, ArrayList< Entry > >();
  private static SimpleNode arvore;
  private static String entryReading = null;
  public static void main(String args []) throws ParseException, IOException {
    
	symbolTable.put("@article", new HashMap<String, String >());
    symbolTable.put("@book", new HashMap<String, String >());
    symbolTable.put("@booklet", new HashMap<String, String >());
    symbolTable.put("@conference", new HashMap<String, String >());
    symbolTable.put("@inbook", new HashMap<String, String >());
    symbolTable.put("@incollection", new HashMap<String, String >());
    symbolTable.put("@inproceedings", new HashMap<String, String >());
    symbolTable.put("@manual", new HashMap<String, String >());
    symbolTable.put("@mastersthesis", new HashMap<String, String >());
    symbolTable.put("@misc", new HashMap<String, String >());
    symbolTable.put("@phdthesis", new HashMap<String, String >());
    symbolTable.put("@proceedings", new HashMap<String, String >());
    symbolTable.put("@techreport", new HashMap<String, String >());
    symbolTable.put("@unpublished", new HashMap<String, String >());

    entradas.put("article", new ArrayList<Entry >());
    entradas.put("book", new ArrayList<Entry >());
    entradas.put("booklet", new ArrayList<Entry >());
    entradas.put("conference", new ArrayList<Entry >());
    entradas.put("inbook", new ArrayList<Entry >());
    entradas.put("incollection", new ArrayList<Entry >());
    entradas.put("inproceedings", new ArrayList<Entry >());
    entradas.put("manual", new ArrayList<Entry >());
    entradas.put("mastersthesis", new ArrayList<Entry >());
    entradas.put("misc", new ArrayList<Entry >());
    entradas.put("phdthesis", new ArrayList<Entry >());
    entradas.put("proceedings", new ArrayList<Entry >());
    entradas.put("techreport", new ArrayList<Entry >());
    entradas.put("unpublished", new ArrayList<Entry >());


    String fname = "";
    Scanner sc = new Scanner(System.in);
    while (fileExist(fname) != true) {
	    System.out.print("Introduza o ficheiro que pretende usar > ");
	    fname = sc.nextLine();
	}

	BibTeX parser = new BibTeX(new FileInputStream(new File(fname)));
	arvore = parser.start();
	//arvore.dump("");
	//imprimirSymbolTable();
	semanticAnalysis();
	sc.close();
  }

  private static boolean fileExist(String filename) {
	File file = new File(filename);
	return file.exists();
  }
}

PARSER_END(BibTeX)

SKIP :
{
	" " | "\r" | "\t" | "\n"
}

TOKEN : // 1st level (entries)
{
	< ARTICLE : "@article" > |
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |
	< MASTERSTHESIS : "@mastersthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" >
}

TOKEN : // 2nd level [fields]
{
	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< JOURNAL : "journal" > |
	< YEAR : "year" > |
	< VOLUME : "volume" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |
	< SERIES : "series" > |
	< ADDRESS : "address" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< BOOKTITLE : "booktitle" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< INSTITUTION : "institution" >
}

TOKEN :
{
	< FIELD : "\"" (< WORD > | " ")+ "\"" > |
	< WORD : (< CHARACTER > | < INTEGER >)+ > |
	< CHARACTER : ["A"-"Z", "a"-"z"] > |
	< INTEGER : ["0"-"9"] > |
	< OPENBRACES : "{" > |
	< CLOSEBRACES : "}" > |
	< COMMA : "," > |
	< EQUALS : "=" >
}

void imprimirSymbolTable() :{}
{
  {
	for (HashMap.Entry<String, HashMap<String, String >> entry : symbolTable.entrySet()) {
        	String onKey = entry.getKey();
        	for( HashMap.Entry<String, String> entrada : entry.getValue().entrySet()){
            System.out.println("Key = " + onKey + "|| " + "Entry = " + entrada.getKey() + ", Value = " + entry.getValue().get(entrada.getKey()));
      }    }
  }
}

SimpleNode start() : {Token t1;}
{
  (
    (
	t1 = < ARTICLE > |
	t1 = < BOOK > |
	t1 = < BOOKLET > |
	t1 = < CONFERENCE > |
	t1 = < INBOOK > |
	t1 = < INCOLLECTION >  |
	t1 = < INPROCEEDINGS > |
	t1 = < MANUAL > |
	t1 = < MASTERSTHESIS > |
	t1 = < MISC > |
	t1 = < PHDTHESIS > |
	t1 = < PROCEEDINGS > |
	t1 = < TECHREPORT >  |
	t1 = < UNPUBLISHED >
	)	{entryReading = t1.image;}
	< OPENBRACES >
	data()
	< CLOSEBRACES >
)+ < EOF >
	{
	jjtThis.jjtSetValue(t1.image);
	//System.out.println(jjtThis.jjtGetValue());
    return jjtThis;
  }
}

Token atribute(): {Token t1 = null;}
{
  (
  	t1 = < AUTHOR> |
	t1 = < TITLE> |
	t1 = < JOURNAL> |
	t1 = < YEAR> |
	t1 = < VOLUME> |
	t1 = < NUMBER> |
	t1 = < PAGES> |
	t1 = < MONTH> |
	t1 = < NOTE> |
	t1 = < KEY> |
	t1 = < EDITOR> |
	t1 = < PUBLISHER> |
	t1 = < SERIES> |
	t1 = < ADDRESS> |
	t1 = < EDITION> |
	t1 = < HOWPUBLISHED> |
	t1 = < CHAPTER> |
	t1 = < TYPE> |
	t1 = < BOOKTITLE> |
	t1 = < ORGANIZATION> |
	t1 = < SCHOOL> |
	t1 = < INSTITUTION>
)
	definition(t1)
	{
	  return t1;
	}
}

void data(): {Token t1 = null;}
{
  (t1 = < WORD >) {symbolTable.get(entryReading).put("reference", t1.image);} <COMMA > // TODO: Alterar
  (t1 = atribute()
  {
    jjtThis.jjtSetValue(t1.image);
    //System.out.println(jjtThis.jjtGetValue());
  }< COMMA >)*
}

Token definition(Token attr) : {Token field = null;}
{
    < EQUALS > field = < FIELD >
  {
    if (field == null) System.out.println("There was an error in syntactic analysis");
    else
    {
      jjtThis.jjtSetValue(field.image);
      //System.out.println(entryReading);
      symbolTable.get(entryReading).put(attr.image, field.image);
    }
    return field;
  }
}


void semanticAnalysis() :{}
{
	{
	for (HashMap.Entry<String, HashMap<String, String >> entry : symbolTable.entrySet()) {
        	String onKey = entry.getKey();
        	switch(onKey)        	{
        	  case "@article":
        	  	article(entry.getValue());
        	  	break;
        	  case "@book":
        	  	book(entry.getValue());
        	  	break;
        	  case "@booklet":
        	  	booklet(entry.getValue());
        	  	break;
        	  case "@conference":
        	  	conference(entry.getValue());
        	  	break;
        	  case "@inbook":
        	  	inbook(entry.getValue());
        	  	break;
        	  case "@incollection":
        	  	incollection(entry.getValue());
        	  	break;
        	  case "@inproceedings":
        	  	inproceedings(entry.getValue());
        	  	break;
        	  case "@manual":
        	  	manual(entry.getValue());
        	  	break;
        	  case "@mastersthesis":
        	  	mastersthesis(entry.getValue());
        	  	break;
        	  case "@misc":
        	  	misc(entry.getValue());
        	  	break;
        	  case "@phdthesis":
        	  	phdthesis(entry.getValue());
        	  	break;
        	  case "@proceedings":
        	  	proceedings(entry.getValue());
        	  	break;
        	  case "@techreport":
        	  	techreport(entry.getValue());
        	  	break;
        	  case "@unpublished":
        	  	unpublished(entry.getValue());
        	  	break;        	}
      }
    }
}

void article(HashMap<String, String > dados) : {}
{
	{
	  try {
	    String reference = dados.get("reference"), author = dados.get("author"), title = dados.get("title"), journal = dados.get("journal"), year = dados.get("year");

		if(reference == null || author == null || title == null || journal == null || year == null) throw new ParsingError("[@Article] : Estes campos são obrigatórios: author, title, journal, year.");
		else {
		  Article novoArtigo = new Article(reference, author, title, journal, year);
		  for (HashMap.Entry<String, String > entry : dados.entrySet()) {
		    if (entry.getKey() == "reference" || entry.getKey() == "author" || entry.getKey() == "title" || entry.getKey() == "journal" || entry.getKey() == "year"){}
		    else{
		    switch(entry.getKey())		    {
		      case "volume":
		      	novoArtigo.setVolume(entry.getValue());
		      	break;
		      case "number":
		      	novoArtigo.setNumber(entry.getValue());
		      	break;
		      case "pages":
		      	novoArtigo.setPages(entry.getValue());
		      	break;
		      case "month":
		      	novoArtigo.setMonth(entry.getValue());
		      	break;
		      case "note":
		      	novoArtigo.setNote(entry.getValue());
		      	break;
		      case "key":
		      	novoArtigo.setKey(entry.getValue());
		      	break;
		      default:
		      	throw new ParsingError("[@Article] " + entry.getKey() + " não é um campo válido.");
		      	break;		    }
		  }
		  }
		  entradas.get("article").add(novoArtigo);		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
  	}
}
/*
void book() : {Token reference = null , author = null, editor = null, title = null, publisher = null, year = null, number = null, volume = null, series = null, address = null, edition = null, month = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
    (( (< AUTHOR > author = definition()) | (< EDITOR > editor = definition()) ) < COMMA >)?
    (< TITLE > title = definition() < COMMA >)?
    (< PUBLISHER > publisher = definition() < COMMA >)?
    (< YEAR > year = definition() < COMMA >)?
    ( (<VOLUME> volume = definition() | < NUMBER > number = definition()) < COMMA >)?
    (< SERIES > series = definition() < COMMA >)?
    (< ADDRESS > address = definition() < COMMA >)?
    (< EDITION > edition = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
    {
      try {
		if (reference == null) throw new ParsingError("[@book] : Falta uma chave de citação!");
		if ( (author != null || editor != null) && title != null && publisher != null && year != null)
		{
		  Book livro;
		  if (author != null) livro = new Book(reference.image,"author", author.image, title.image, publisher.image, year.image);
		  else  livro = new Book(reference.image,"editor", editor.image, title.image, publisher.image, year.image);
		  
		  if (volume != null) livro.setVolume(volume.image);
		  if (number != null) livro.setNumber(number.image);
		  if (series != null) livro.setSeries(series.image);
		  if (address != null) livro.setAddress(address.image);
		  if (edition != null) livro.setEdition(edition.image);
		  if (month != null) livro.setMonth(month.image);
		  if (note != null) livro.setNote(note.image);
		  if (key != null) livro.setKey(key.image);
		} else {
		  throw new ParsingError("[@book] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e) {
	    System.out.println(e.getMessage());
	  }
  	}
}

void booklet() :{Token reference = null, title = null, author = null, howpublished = null, address = null, month = null, year = null, note = null, key = null;}
{
  	< OPENBRACES > (reference = <WORD>)? < COMMA >
    (< TITLE > title = definition() < COMMA >)?
    (< AUTHOR > author = definition() < COMMA >)?
    (< HOWPUBLISHED > howpublished = definition() < COMMA >)?
    (< ADDRESS > address = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< YEAR > year = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
	{
	 try {
	  if (reference == null) throw new ParsingError("[@booklet] : Falta uma chave de citação!");
	  if (title != null)
	  {
	    Booklet blt = new Booklet(reference.image, title.image);
	    if (author != null) blt.setAuthor(author.image);
	    if (howpublished != null) blt.setHowPublished(howpublished.image);
	    if (address != null) blt.setAddress(address.image);
	    if (month != null) blt.setMonth(month.image);
	    if (year != null) blt.setYear(year.image);
	    if (note != null) blt.setNote(note.image);
	    if (key != null) blt.setKey(key.image);
		} else {
		  throw new ParsingError("[@booklet] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e) {
	    System.out.println(e.getMessage());
	  }
	}
}

void conference() : {Token reference = null, author = null, title = null, booktitle = null, year = null, editor = null, volume = null, number = null, series = null, pages = null, address = null, month = null, organization = null, publisher = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< AUTHOR > author = definition() < COMMA >)?
	(< TITLE > title = definition() < COMMA >)?
	(< BOOKTITLE > booktitle = definition() < COMMA >)?
	(< YEAR > year = definition() < COMMA >)?
    (< EDITOR > editor = definition() < COMMA >)?
    ( ((<VOLUME> volume = definition()) | (< NUMBER > number = definition())) < COMMA >)?
    (< SERIES > series = definition() < COMMA >)?
    (< PAGES > pages = definition() < COMMA >)?
    (< ADDRESS > address = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< ORGANIZATION > organization = definition() < COMMA >)?
    (< PUBLISHER > publisher = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
	{
	 try {
	  if (reference == null) throw new ParsingError("[@conference] : Falta uma chave de citação!");
		if (author != null && title != null && booktitle != null && year != null)
		{
		  Conference conference = new Conference(reference.image, author.image, title.image, booktitle.image, year.image);
		  if (editor != null) conference.setEditor(editor.image);
		  if (volume != null) conference.setVolume(volume.image);
		  if (number != null) conference.setNumber(number.image);
		  if (series != null) conference.setSeries(series.image);
		  if (pages != null) conference.setPages(pages.image);
		  if (address != null) conference.setAddress(address.image);
		  if (month != null) conference.setMonth(month.image);
		  if (organization != null) conference.setOrganization(organization.image);
		  if (publisher != null) conference.setPublisher(publisher.image);
		  if (note != null) conference.setNote(note.image);
		  if (key != null) conference.setKey(key.image);
		} else {
		  throw new ParsingError("[@conference] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e) {
	    System.out.println(e.getMessage());
	  }
  	}
}*/

void inbook(HashMap<String, String> dados) : {}
{
	{
		try {
		    String reference = dados.get("reference"), author = dados.get("author"), editor = dados.get("editor"), title = dados.get("title"), chapter = dados.get("chapter"), pages = dados.get("pages"), publisher = dados.get("publisher"), year = dados.get("year"), volume = dados.get("volume"), number = dados.get("number");
	
			if (!(author == null ^ editor == null) || title == null || !(chapter == null ^ pages == null) || publisher == null || year == null) throw new ParsingError("[@inbook] : Estes campos são obrigatórios: author/editor, title, chapter/pages, publisher, year.");
			else if (volume != null && number != null) throw new ParsingError("[@inbook] : Os campos \"volume\" e \"number\" não podem estar simultaneamente presentes.");
			else {
				Inbook newInbook = new Inbook(reference, (author != null ? "author" : "editor"), (author != null ? author : editor), title, "chapter", chapter, publisher, year);
				
				for (HashMap.Entry<String, String> entry : dados.entrySet()) {
					if (entry.getKey().equals("reference") || entry.getKey().equals("author") || entry.getKey().equals("editor") || entry.getKey().equals("title") || entry.getKey().equals("chapter") || entry.getKey().equals("pages") || entry.getKey().equals("publisher") || entry.getKey().equals("year")) continue;
					else {
						switch (entry.getKey()) {
							case "volume":
								newInbook.setVolume(entry.getValue());
								break;
							case "number":
								newInbook.setNumber(entry.getValue());
								break;
							case "series":
								newInbook.setSeries(entry.getValue());
								break;
							case "type":
								newInbook.setType(entry.getValue());
								break;
							case "address":
								newInbook.setAddress(entry.getValue());
								break;
							case "edition":
								newInbook.setEdition(entry.getValue());
								break;
							case "month":
								newInbook.setMonth(entry.getValue());
								break;
							case "note":
								newInbook.setNote(entry.getValue());
								break;
							case "key":
								newInbook.setKey(entry.getValue());
								break;
							default:
								throw new ParsingError("[@inbook] " + entry.getKey() + " não é um campo válido.");
						}
					}
				}
				
				entradas.get("inbook").add(newInbook);
			}
		} catch (ParsingError e) {
			System.out.println(e.getMessage());
	    }
	}
}

void incollection(HashMap<String, String> dados) : {}
{
	{
		try {
		    String reference = dados.get("reference"), author = dados.get("author"), title = dados.get("title"), booktitle = dados.get("booktitle"), publisher = dados.get("publisher"), year = dados.get("year"), volume = dados.get("volume"), number = dados.get("number");
	
			if (author == null | title == null | booktitle == null || publisher == null || year == null) throw new ParsingError("[@incollection] : Estes campos são obrigatórios: author, title, booktitle, publisher, year.");
			else if (volume != null && number != null) throw new ParsingError("[@incollection] : Os campos \"volume\" e \"number\" não podem estar simultaneamente presentes.");
			else {
				Incollection newIncollection = new Incollection(reference, author, title, booktitle, publisher, year);
				
				for (HashMap.Entry<String, String> entry : dados.entrySet()) {
					if (entry.getKey().equals("reference") || entry.getKey().equals("author") || entry.getKey().equals("title") || entry.getKey().equals("booktitle") || entry.getKey().equals("publisher") || entry.getKey().equals("year")) continue;
					else {
						switch (entry.getKey()) {
							case "editor":
								newInbook.setEditor(entry.getValue());
								break;
							case "volume":
								newInbook.setVolume(entry.getValue());
								break;
							case "number":
								newInbook.setNumber(entry.getValue());
								break;
							case "series":
								newInbook.setSeries(entry.getValue());
								break;
							case "type":
								newInbook.setType(entry.getValue());
								break;
							case "chapter":
								newInbook.setChapter(entry.getValue());
								break;
							case "pages":
								newInbook.setPages(entry.getValue());
								break;
							case "address":
								newInbook.setAddress(entry.getValue());
								break;
							case "edition":
								newInbook.setEdition(entry.getValue());
								break;
							case "month":
								newInbook.setMonth(entry.getValue());
								break;
							case "note":
								newInbook.setNote(entry.getValue());
								break;
							case "key":
								newInbook.setKey(entry.getValue());
								break;
							default:
								throw new ParsingError("[@incollection] " + entry.getKey() + " não é um campo válido.");
						}
					}
				}
				
				entradas.get("incollection").add(newIncollection);
			}
		} catch (ParsingError e) {
			System.out.println(e.getMessage());
	    }
	}
}

void inproceedings() : {Token reference = null, author = null, title = null, booktitle = null, year = null, editor = null, volume = null, number = null, series = null, pages = null, address = null, month = null, organization = null, publisher = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< AUTHOR > author = definition() < COMMA >)?
	(< TITLE > title = definition() < COMMA >)?
	(< BOOKTITLE > booktitle = definition() < COMMA >)?
	(< YEAR > year = definition() < COMMA >)?
    (< EDITOR > editor = definition() < COMMA >)?
    ( ((<VOLUME> volume = definition()) | (< NUMBER > number = definition())) < COMMA >)?
    (< SERIES > series = definition() < COMMA >)?
    (< PAGES > pages = definition() < COMMA >)?
    (< ADDRESS > address = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< ORGANIZATION > organization = definition() < COMMA >)?
    (< PUBLISHER > publisher = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
	{
	  try {
		if (reference == null) throw new ParsingError("[@inproceedings] : Falta uma chave de citação!");
		if (author != null && title != null && booktitle != null && year != null)
		{
		  Inproceedings inproceedings = new Inproceedings(reference.image, author.image, title.image, booktitle.image, year.image);
		  if (editor != null) inproceedings.setEditor(editor.image);
		  if (volume != null) inproceedings.setVolume(volume.image);
		  if (number != null) inproceedings.setNumber(number.image);
		  if (series != null) inproceedings.setSeries(series.image);
		  if (pages != null) inproceedings.setPages(pages.image);
		  if (address != null) inproceedings.setAddress(address.image);
		  if (month != null) inproceedings.setMonth(month.image);
		  if (organization != null) inproceedings.setOrganization(organization.image);
		  if (publisher != null) inproceedings.setPublisher(publisher.image);
		  if (note != null) inproceedings.setNote(note.image);
		  if (key != null) inproceedings.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@inproceedings] : Estes campos são obrigatórios: author, title, booktitle, year.");
		}
		} catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
    }
}

/*void manual() : {Token reference = null, title = null, author = null, organization = null, address = null, edition = null, month = null, year = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< TITLE > title = definition() < COMMA >)?
    (< AUTHOR > author = definition() < COMMA >)?
    (< ORGANIZATION > organization = definition() < COMMA >)?
    (< ADDRESS > address = definition() < COMMA >)?
    (< EDITION > edition = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< YEAR > year = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
	{
	  try {
	    if (reference == null) throw new ParsingError("[@manual] : Falta uma chave de citação!");
		if (title != null)
		{
		  Manual manual = new Manual(reference.image, title.image);
		  if (author != null) manual.setAuthor(author.image);
		  if (organization != null) manual.setOrganization(organization.image);
		  if (address != null) manual.setAddress(address.image);
		  if (edition != null) manual.setEdition(edition.image);
		  if (month != null) manual.setMonth(month.image);
		  if (year != null) manual.setYear(year.image);
		  if (note != null) manual.setNote(note.image);
		  if (key != null) manual.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@manual] : Este campo é obrigatório: title.");
		}
		} catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
    }
}

void mastersthesis() : {Token reference = null, author = null, title = null, school = null, year = null, type = null, address = null, month = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
    (< AUTHOR > author = definition() < COMMA >)?
	(< TITLE > title = definition() < COMMA >)?
    (< SCHOOL > school = definition() < COMMA >)?
    (< YEAR > year = definition() < COMMA >)?
    (< TYPE > type = definition() < COMMA >)?
    (< ADDRESS > address = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
	{
	  try {
	    if (reference == null) throw new ParsingError("[@mastersthesis] : Falta uma chave de citação!");
		if (author != null && title != null && school != null && year != null)
		{
		  Mastersthesis mastersthesis = new Mastersthesis(reference.image, author.image, title.image, school.image, year.image);
		  if (type != null) mastersthesis.setType(type.image);
		  if (address != null) mastersthesis.setAddress(address.image);
		  if (month != null) mastersthesis.setMonth(month.image);
		  if (note != null) mastersthesis.setNote(note.image);
		  if (key != null) mastersthesis.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@mastersthesis] : Estes campos são obrigatórios: author, title, school, year.");
		}
		} catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
    }
}

void misc() : {Token reference = null, author = null, title = null, howpublished = null, month = null, year = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
    (< AUTHOR > author = definition() < COMMA >)?
    (< TITLE > title = definition() < COMMA >)?
    (< HOWPUBLISHED > howpublished = definition() < COMMA >)?
    (< MONTH > month = definition() < COMMA >)?
    (< YEAR > year = definition() < COMMA >)?
    (< NOTE > note = definition() < COMMA >)?
    (< KEY > key = definition() < COMMA >)?
    < CLOSEBRACES >
	{
	  try {
		if (reference == null) throw new ParsingError("[@misc] : Falta uma chave de citação!");
		if (reference != null)
		{
		  Misc misc = new Misc(reference.image);
		  if (author != null) misc.setAuthor(author.image);
		  if (title != null) misc.setTitle(title.image);
		  if (howpublished != null) misc.setHowpublished(howpublished.image);
		  if (month != null) misc.setMonth(month.image);
		  if (year != null) misc.setYear(year.image);
		  if (note != null) misc.setNote(note.image);
		  if (key != null) misc.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@misc] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}

void phdthesis() : {Token reference = null, author = null, title = null, school = null, year = null, type = null, address = null, month = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< AUTHOR > author = definition() < COMMA >)?
	(< TITLE > title = definition() < COMMA >)?
	(< SCHOOL > school = definition() < COMMA >)?
	(< YEAR > year = definition() < COMMA >)?
	(< TYPE > type = definition() < COMMA > )?
	(< ADDRESS > address = definition() < COMMA > )?
	(< MONTH > month = definition() < COMMA > )?
	(< NOTE > note = definition() < COMMA > )?
	(< KEY > note = definition() < COMMA > )?
	< CLOSEBRACES >
	{
	  try {
		if (reference == null) throw new ParsingError("[@phdthesis] : Falta uma chave de citação!");
		if (author != null && title != null && school != null && year != null)
		{
		  Phdthesis phdthesis = new Phdthesis(reference.image, author.image, title.image, school.image, year.image);
		  if (type != null) phdthesis.setType(type.image);
		  if (address != null) phdthesis.setAddress(address.image);
		  if (month != null) phdthesis.setMonth(month.image);
		  if (note != null) phdthesis.setNote(note.image);
		  if (key != null) phdthesis.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@phdthesis] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}

void proceedings() : {Token reference = null, title = null, number = null, year = null, editor = null, volume = null, series = null, address = null, month = null, organization = null, publisher = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< TITLE > title = definition() < COMMA >)?
	(< YEAR > year = definition() < COMMA >)?
	(< EDITOR > editor = definition() < COMMA >)?
	((< VOLUME > volume = definition() < COMMA >) | (< NUMBER > number = definition() < COMMA >))?
	(< SERIES > series = definition() < COMMA >)?
	(< ADDRESS > address = definition() < COMMA >)?
	(< MONTH > month = definition() < COMMA >)?
	(< ORGANIZATION > organization = definition() < COMMA >)?
	(< PUBLISHER > publisher = definition() < COMMA >)?
	(< NOTE > note = definition() < COMMA >)?
	(< KEY > key = definition() < COMMA >)?
	< CLOSEBRACES >
	{
      try {
		if (reference == null) throw new ParsingError("[@proceedings] : Falta uma chave de citação!");
		if (title != null && year != null)
		{
		  Proceedings proceedings;
		  proceedings = new Proceedings(reference.image, title.image, year.image);
		  if (editor != null) proceedings.setEditor(editor.image);
		  if (number != null) proceedings.setNumber(number.image);
		  if (volume != null) proceedings.setVolume(volume.image);
		  if (series != null) proceedings.setSeries(series.image);
		  if (organization != null) proceedings.setOrganization(organization.image);
		  if (publisher != null) proceedings.setPublisher(publisher.image);
		  if (address != null) proceedings.setAddress(address.image);
		  if (month != null) proceedings.setMonth(month.image);
		  if (note != null) proceedings.setNote(note.image);
		  if (key != null) proceedings.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@proceedings] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}

void techreport() : {Token reference = null, author = null, title = null, institution = null, year = null, type = null, number = null, address = null, month = null, note = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< AUTHOR > author = definition() < COMMA >)?
	(< TITLE > title = definition() < COMMA >)?
	(< INSTITUTION > institution = definition() < COMMA >)?
	(< YEAR > year = definition() < COMMA >)?
	(< TYPE > type = definition() < COMMA >)?
	(< NUMBER > number = definition() < COMMA >)?
	(< ADDRESS > address = definition() < COMMA >)?
	(< MONTH > month = definition() < COMMA >)?
	(< NOTE > note = definition() < COMMA >)?
	(< KEY > key = definition() < COMMA >)?
	< CLOSEBRACES >
	{
	  try {
		if (reference == null) throw new ParsingError("[@techreport] : Falta uma chave de citação!");
		if (author != null && title != null && institution != null && year != null)
		{
		  Techreport techreport;
		  techreport = new Techreport(reference.image, author.image, title.image, institution.image, year.image);
		  if (type != null) techreport.setType(type.image);
		  if (number != null) techreport.setNumber(number.image);
		  if (address != null) techreport.setAddress(address.image);
		  if (month != null) techreport.setMonth(month.image);
		  if (note != null) techreport.setNote(note.image);
		  if (key != null) techreport.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@techreport] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
  	}
}

void unpublished() : {Token reference = null, author = null, title = null, note = null, month = null, year = null, key = null;}
{
	< OPENBRACES > (reference = <WORD>)? < COMMA >
	(< AUTHOR > author = definition() < COMMA >)?
	(< TITLE > title = definition() < COMMA >)?
	(< NOTE > note = definition() < COMMA >)?
	(< MONTH > month = definition() < COMMA >)?
	(< YEAR > year = definition() < COMMA >)?
	(< KEY > key = definition() < COMMA >)?
	< CLOSEBRACES >
	{
	try {
		if (reference == null) throw new ParsingError("[@unpublished] : Falta uma chave de citação!");
		if ( author != null  && title != null && note != null)
		{
		  Unpublished unpublished;
		  unpublished = new Unpublished(reference.image, author.image, title.image, note.image);
		  if (month != null) unpublished.setMonth(month.image);
		  if (year != null) unpublished.setYear(year.image);
		  if (key != null) unpublished.setKey(key.image);
		} else
		{
		  throw new ParsingError("[@unpublished] : Estes campos são obrigatórios: author, title, journal, year, volume.");
		}
	  } catch (ParsingError e)
	  {
	    System.out.println(e.getMessage());
	  }
	}
}
*/