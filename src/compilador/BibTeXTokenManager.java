/* Generated By:JavaCC: Do not edit this line. BibTeXTokenManager.java */
package compilador;
import java.io.File;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

/** Token Manager. */
public class BibTeXTokenManager implements BibTeXConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffe0L) != 0L)
            return 7;
         if ((active0 & 0x3fffff00000L) != 0L)
         {
            jjmatchedKind = 42;
            return 106;
         }
         return -1;
      case 1:
         if ((active0 & 0x3fffff00000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
            return 106;
         }
         if ((active0 & 0x20000L) != 0L)
            return 92;
         if ((active0 & 0x40000L) != 0L)
            return 103;
         if ((active0 & 0xc0L) != 0L)
            return 10;
         if ((active0 & 0x7000L) != 0L)
            return 49;
         if ((active0 & 0x100L) != 0L)
            return 26;
         if ((active0 & 0x18000L) != 0L)
            return 73;
         if ((active0 & 0x20L) != 0L)
            return 6;
         if ((active0 & 0xe00L) != 0L)
            return 31;
         return -1;
      case 2:
         if ((active0 & 0x3ffdff00000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 106;
         }
         if ((active0 & 0x4000L) != 0L)
            return 64;
         if ((active0 & 0xc0L) != 0L)
            return 9;
         if ((active0 & 0x20000000L) != 0L)
            return 106;
         if ((active0 & 0x20000L) != 0L)
            return 91;
         if ((active0 & 0x3000L) != 0L)
            return 48;
         if ((active0 & 0x40000L) != 0L)
            return 102;
         if ((active0 & 0x8000L) != 0L)
            return 72;
         if ((active0 & 0xe00L) != 0L)
            return 30;
         if ((active0 & 0x100L) != 0L)
            return 25;
         if ((active0 & 0x10000L) != 0L)
            return 82;
         if ((active0 & 0x20L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active0 & 0x20L) != 0L)
            return 4;
         if ((active0 & 0x2010800000L) != 0L)
            return 106;
         if ((active0 & 0x4000L) != 0L)
            return 63;
         if ((active0 & 0x1000L) != 0L)
            return 47;
         if ((active0 & 0x20000L) != 0L)
            return 90;
         if ((active0 & 0x2000L) != 0L)
            return 59;
         if ((active0 & 0x200L) != 0L)
            return 29;
         if ((active0 & 0x40000L) != 0L)
            return 101;
         if ((active0 & 0x8000L) != 0L)
            return 71;
         if ((active0 & 0x400L) != 0L)
            return 41;
         if ((active0 & 0xc0L) != 0L)
            return 15;
         if ((active0 & 0x3dfcf700000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 106;
         }
         if ((active0 & 0x100L) != 0L)
            return 24;
         if ((active0 & 0x10000L) != 0L)
            return 81;
         return -1;
      case 4:
         if ((active0 & 0x10000L) != 0L)
            return 80;
         if ((active0 & 0x20L) != 0L)
            return 3;
         if ((active0 & 0xc200000L) != 0L)
            return 106;
         if ((active0 & 0x20000L) != 0L)
            return 89;
         if ((active0 & 0x1000L) != 0L)
            return 46;
         if ((active0 & 0x2000L) != 0L)
            return 58;
         if ((active0 & 0x200L) != 0L)
            return 28;
         if ((active0 & 0xc0L) != 0L)
            return 14;
         if ((active0 & 0x40000L) != 0L)
            return 100;
         if ((active0 & 0x3dfc3500000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 4;
            }
            return 106;
         }
         if ((active0 & 0x8000L) != 0L)
            return 70;
         if ((active0 & 0x400L) != 0L)
            return 40;
         if ((active0 & 0x100L) != 0L)
            return 23;
         return -1;
      case 5:
         if ((active0 & 0x100L) != 0L)
            return 22;
         if ((active0 & 0x10143100000L) != 0L)
            return 106;
         if ((active0 & 0x20L) != 0L)
            return 2;
         if ((active0 & 0x20000L) != 0L)
            return 88;
         if ((active0 & 0x1000L) != 0L)
            return 45;
         if ((active0 & 0x2000L) != 0L)
            return 57;
         if ((active0 & 0x40000L) != 0L)
            return 99;
         if ((active0 & 0x2de80400000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
            return 106;
         }
         if ((active0 & 0x80L) != 0L)
            return 13;
         if ((active0 & 0x8000L) != 0L)
            return 69;
         if ((active0 & 0x200L) != 0L)
            return 8;
         if ((active0 & 0x400L) != 0L)
            return 39;
         if ((active0 & 0x10000L) != 0L)
            return 79;
         return -1;
      case 6:
         if ((active0 & 0x10000L) != 0L)
            return 78;
         if ((active0 & 0x1600400000L) != 0L)
            return 106;
         if ((active0 & 0x100L) != 0L)
            return 21;
         if ((active0 & 0x20L) != 0L)
            return 1;
         if ((active0 & 0x20000L) != 0L)
            return 87;
         if ((active0 & 0x2c880000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
            return 106;
         }
         if ((active0 & 0x2000L) != 0L)
            return 56;
         if ((active0 & 0x40000L) != 0L)
            return 98;
         if ((active0 & 0x8000L) != 0L)
            return 68;
         if ((active0 & 0x80L) != 0L)
            return 12;
         if ((active0 & 0x400L) != 0L)
            return 38;
         return -1;
      case 7:
         if ((active0 & 0x40000L) != 0L)
            return 97;
         if ((active0 & 0x10000L) != 0L)
            return 77;
         if ((active0 & 0x8000L) != 0L)
            return 67;
         if ((active0 & 0x2000L) != 0L)
            return 55;
         if ((active0 & 0x20000L) != 0L)
            return 86;
         if ((active0 & 0x400L) != 0L)
            return 37;
         if ((active0 & 0x2c880000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
            return 106;
         }
         if ((active0 & 0x100L) != 0L)
            return 20;
         return -1;
      case 8:
         if ((active0 & 0x400L) != 0L)
            return 36;
         if ((active0 & 0x8000L) != 0L)
            return 51;
         if ((active0 & 0x100L) != 0L)
            return 19;
         if ((active0 & 0x4080000000L) != 0L)
            return 106;
         if ((active0 & 0x28800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 8;
            return 106;
         }
         if ((active0 & 0x10000L) != 0L)
            return 76;
         if ((active0 & 0x20000L) != 0L)
            return 85;
         if ((active0 & 0x2000L) != 0L)
            return 54;
         if ((active0 & 0x40000L) != 0L)
            return 96;
         return -1;
      case 9:
         if ((active0 & 0x40000L) != 0L)
            return 95;
         if ((active0 & 0x20000L) != 0L)
            return 12;
         if ((active0 & 0x10000L) != 0L)
            return 75;
         if ((active0 & 0x2000L) != 0L)
            return 53;
         if ((active0 & 0x400L) != 0L)
            return 35;
         if ((active0 & 0x100L) != 0L)
            return 1;
         if ((active0 & 0x28800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 9;
            return 106;
         }
         return -1;
      case 10:
         if ((active0 & 0x400L) != 0L)
            return 34;
         if ((active0 & 0x10000L) != 0L)
            return 51;
         if ((active0 & 0x8800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 10;
            return 106;
         }
         if ((active0 & 0x40000L) != 0L)
            return 94;
         if ((active0 & 0x20000000000L) != 0L)
            return 106;
         if ((active0 & 0x2000L) != 0L)
            return 52;
         return -1;
      case 11:
         if ((active0 & 0x2000L) != 0L)
            return 51;
         if ((active0 & 0x400L) != 0L)
            return 33;
         if ((active0 & 0x8800000000L) != 0L)
            return 106;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 48);
      case 39:
         return jjStopAtPos(0, 46);
      case 44:
         return jjStopAtPos(0, 45);
      case 61:
         return jjStopAtPos(0, 47);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x7ffe0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200100000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x440000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x12000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x84000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10100000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000200000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 123:
         return jjStopAtPos(0, 44);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000020L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000100L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x640000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x120800000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200e00L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4819400000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x82140000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000803000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000008000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x440004000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040e00L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000001c0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010020L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10300000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000200L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20400L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 106);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1100L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000100c0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800040800L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x200400000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20448000020L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x302000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20480000020L);
      case 107:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10040100600L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000a000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800041000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x401000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800040000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000012100L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x480L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000a00L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 106);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 106);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x38080L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x800040420L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 106);
         break;
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x2100L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(7, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000d00L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800040000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(7, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000002000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 106);
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000018000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 106);
         break;
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x800040000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x800040000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(9, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(10, 8);
         return jjMoveStringLiteralDfa11_0(active0, 0x800040000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0xc00L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 106);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(10, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(11, 18);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 35, 106);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 106);
         return jjMoveStringLiteralDfa12_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(11, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         break;
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(13, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 107;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 7:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 103;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 61;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 15:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 107)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(106);
                  }
                  else if (curChar == 64)
                     jjAddStates(0, 12);
                  break;
               case 9:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 111)
                     jjCheckNAdd(8);
                  break;
               case 30:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 73:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 1:
                  if (curChar == 101 && kind > 19)
                     kind = 19;
                  break;
               case 2:
                  if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 107 && kind > 19)
                     kind = 19;
                  break;
               case 11:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 116 && kind > 19)
                     kind = 19;
                  break;
               case 13:
                  if (curChar == 101)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 99)
                     jjCheckNAdd(1);
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 111)
                     jjCheckNAdd(8);
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 110 && kind > 19)
                     kind = 19;
                  break;
               case 34:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 108 && kind > 19)
                     kind = 19;
                  break;
               case 46:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 115 && kind > 19)
                     kind = 19;
                  break;
               case 52:
               case 67:
                  if (curChar == 105)
                     jjCheckNAdd(51);
                  break;
               case 53:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 99 && kind > 19)
                     kind = 19;
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 103)
                     jjCheckNAdd(51);
                  break;
               case 76:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 114)
                     jjCheckNAdd(12);
                  break;
               case 86:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 100 && kind > 19)
                     kind = 19;
                  break;
               case 95:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 107 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   7, 11, 18, 27, 32, 44, 50, 62, 66, 74, 84, 93, 104, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\100\141\162\164\151\143\154\145", 
"\100\142\157\157\153", "\100\142\157\157\153\154\145\164", 
"\100\143\157\156\146\145\162\145\156\143\145", "\100\151\156\142\157\157\153", 
"\100\151\156\143\157\154\154\145\143\164\151\157\156", "\100\151\156\160\162\157\143\145\145\144\151\156\147\163", 
"\100\155\141\156\165\141\154", "\100\155\141\163\164\145\162\164\150\145\163\151\163", 
"\100\155\151\163\143", "\100\160\150\144\164\150\145\163\151\163", 
"\100\160\162\157\143\145\145\144\151\156\147\163", "\100\164\145\143\150\162\145\160\157\162\164", 
"\100\165\156\160\165\142\154\151\163\150\145\144", null, "\141\165\164\150\157\162", "\164\151\164\154\145", 
"\152\157\165\162\156\141\154", "\171\145\141\162", "\166\157\154\165\155\145", "\156\165\155\142\145\162", 
"\160\141\147\145\163", "\155\157\156\164\150", "\156\157\164\145", "\153\145\171", 
"\145\144\151\164\157\162", "\160\165\142\154\151\163\150\145\162", "\163\145\162\151\145\163", 
"\141\144\144\162\145\163\163", "\145\144\151\164\151\157\156", 
"\150\157\167\160\165\142\154\151\163\150\145\144", "\143\150\141\160\164\145\162", "\164\171\160\145", 
"\142\157\157\153\164\151\164\154\145", "\157\162\147\141\156\151\172\141\164\151\157\156", 
"\163\143\150\157\157\154", "\151\156\163\164\151\164\165\164\151\157\156", null, null, "\173", "\54", 
"\47", "\75", "\42", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[107];
static private final int[] jjstateSet = new int[214];
static protected char curChar;
/** Constructor. */
public BibTeXTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public BibTeXTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 107; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
